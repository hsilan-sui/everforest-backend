name: CI/CD Workflow

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - develop

jobs:
  #讓 lint 先跑完，test 才跑（可選）確保語法沒錯才跑測試，也可以避免重複安裝相同依賴
  lint:
    name: Run ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.0
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
  # ==> 等本地測試檔也寫好，只要取消註解 以下區塊即可
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   needs: lint #可以避免語法錯誤的程式碼進入測試流程，節省 CI 時間與資源
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.18.0

  #     - name: Install Dependencies
  #       run: npm ci

  #     - name: Run Unit Tests
  #       run: npm run test:unit

  #     - name: Run Integration Tests
  #       run: npm run test:integration

  # 部署區塊 可以在ci.yml 成功通過 自動觸發部署cd.yml檔
  #好處是 ci失敗 擋住 => 可以讓部署 停留在上一次成功的版本不受影響
  # deploy:
  #   name: Deploy to Zeabur (only on main)
  #   if: github.ref == 'refs/heads/main'
  #   needs: test # 確保測試工作成功後再進行部署
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.18.0

  #     - name: Install Zeabur CLI
  #       run: npm install -g zeabur

  #     - name: Login to Zeabur
  #       run: zeabur login --token ${{ secrets.ZB_TOKEN }}

  #     - name: Deploy to Zeabur
  #       run: npx zeabur template deploy -f zeabur-template.yaml
